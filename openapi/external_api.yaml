openapi: 3.0.0
info:
  title: Reconciler mothership external API
  description: External API describing communication between the mothership component and external client
  version: 1.0.0
servers:
  - url: http://{host}:{port}/{version}
    variables:
      host:
        default: localhost
        description: Host for server
      port:
        default: "8080"
        description: Port for server
      version:
        enum:
          - "v1"
        default: "v1"

paths:
  /reconciliations/{schedulingID}/info:
    get:
      description: "Get details of a reconciliation"
      parameters:
        - name: schedulingID
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/ReconcilationOperationsOKResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /reconciliations:
    get:
      description: "Get list of current working reconcilers"
      parameters:
        - name: runtimeID
          required: false
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: status
          required: false
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/status"
      responses:
        "200":
          $ref: "#/components/responses/ReconcilationsOKResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /clusters:
    put:
      description: update existing cluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cluster"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      description: create new cluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cluster"
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /clusters/{runtimeID}:
    delete:
      description: delete cluster
      parameters:
        - name: runtimeID
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/ClusterNotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /clusters/{runtimeID}/status:
    put:
      description: update exisiting cluster status
      parameters:
        - name: runtimeID
          required: true
          in: path
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/statusUpdate"
      responses:
        "201":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/ClusterNotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    get:
      description: get cluster status
      parameters:
        - name: runtimeID
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/ClusterNotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /clusters/{runtimeID}/config/{configVersion}/status:
    get:
      description: test
      parameters:
        - name: runtimeID
          required: true
          in: path
          schema:
            type: string
            format: uuid
        - name: configVersion
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Ok"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/ClusterNotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /clusters/{runtimeID}/statusChanges:
    get:
      description: test
      parameters:
        - name: runtimeID
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Return list of status changes in cluster"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPClusterStatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/ClusterNotFound"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  responses:
    Ok:
      description: "Ok"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPClusterResponse"

    ReconcilationsOKResponse:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPReconcilerStatus"

    ReconcilationOperationsOKResponse:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPReconciliationOperations"

    InternalError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPErrorResponse"

    BadRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPErrorResponse"

    # TODO rename to not found
    ClusterNotFound:
      description: "Given cluster not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPErrorResponse"

  schemas:
    HTTPClusterStatusResponse:
      type: object
      required: [statusChanges]
      properties:
        statusChanges:
          type: array
          items:
            $ref: "#/components/schemas/statusChange"

    HTTPErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: string

    HTTPClusterResponse:
      type: object
      required:
        [cluster, clusterVersion, configurationVersion, status, statusURL]
      properties:
        cluster:
          type: string
          format: uuid
        clusterVersion:
          type: integer
          format: int64
        configurationVersion:
          type: integer
          format: int64
        failures:
          type: array
          items:
            $ref: "#/components/schemas/failure"
        status:
          $ref: "#/components/schemas/status"
        statusURL:
          type: string
          format: uri

    HTTPReconciliationOperations:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/cluster"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/operation"

    HTTPReconcilerStatus:
      type: array
      items:
        $ref: "#/components/schemas/reconciliation"

    reconciliation:
      type: object
      required:
        [lock, runtimeID, shootName, schedulingID, created, updated, status]
      properties:
        lock:
          type: string
        runtimeID:
          type: string
        schedulingID:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/status"

    operation:
      type: object
      required:
        [
          priority,
          schedulingID,
          correlationID,
          component,
          state,
          reason,
          created,
          updated,
        ]
      properties:
        priority:
          type: integer
          format: int64
        schedulingID:
          type: string
          format: uuid
        correlationID:
          type: string
          format: uuid
        component:
          type: string
        state:
          type: string # TODO: this should be enum
        reason:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        clusterMetadata:
          $ref: "#/components/schemas/cluster"

    reconcilerStatus:
      type: object
      required: [cluster, metadata, created, status]
      properties:
        cluster:
          type: string
        metadata:
          $ref: "#/components/schemas/metadata"
        created:
          type: string
          format: date-time
        status:
          type: string

    statusChange:
      type: object
      required: [started, duration, status]
      properties:
        started:
          type: string
          format: date-time
        duration:
          #TODO: what to do with time.Duration
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/status"

    statusUpdate:
      type: object
      required: [status]
      properties:
        status:
          $ref: "#/components/schemas/status"

    status:
      type: string
      enum:
        - reconcile_pending
        - reconcile_disabled
        - ready
        - error
        - reconciling
        - delete_pending
        - delete_error
        - deleting

    failure:
      type: object
      required: [component, reason]
      properties:
        component:
          type: string
        reason:
          type: string

    cluster:
      type: object
      required: [runtimeID, runtimeInput, kymaConfig, metadata, kubeconfig]
      properties:
        runtimeID:
          type: string
          format: uuid
        runtimeInput:
          $ref: "#/components/schemas/runtimeInput"
        kymaConfig:
          $ref: "#/components/schemas/kymaConfig"
        metadata:
          $ref: "#/components/schemas/metadata"
        kubeconfig:
          description: "valid kubeconfig to cluster"
          type: string

    runtimeInput:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string

    kymaConfig:
      type: object
      required: [version, profile, components, administrators]
      properties:
        version:
          type: string
        profile:
          type: string
        components:
          type: array
          items:
            $ref: "#/components/schemas/component"
        administrators:
          type: array
          items:
            type: string

    metadata:
      type: object
      required:
        [
          globalAccountID,
          subAccountID,
          serviceID,
          servicePlanID,
          shootName,
          instanceID,
        ]
      properties:
        globalAccountID:
          type: string
        subAccountID:
          type: string
        serviceID:
          type: string
        servicePlanID:
          type: string
        shootName:
          type: string
        instanceID:
          type: string

    component:
      type: object
      required: [component, namespace, configuration, URL, version]
      properties:
        component:
          type: string
        namespace:
          type: string
        configuration:
          type: array
          items:
            $ref: "#/components/schemas/configuration"
        URL:
          type: string
          format: uri
        version:
          type: string

    configuration:
      type: object
      required: [key, value, secret]
      properties:
        key:
          type: string
        value:
          anyOf:
            - type: string
            - type: boolean
            - type: integer
            - type: number
        secret:
          type: boolean

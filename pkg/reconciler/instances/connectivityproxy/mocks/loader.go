// Code generated by mockery v2.20.2. DO NOT EDIT.

package connectivityproxymocks

import (
	service "github.com/kyma-incubator/reconciler/pkg/reconciler/service"
	mock "github.com/stretchr/testify/mock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1 "k8s.io/api/core/v1"
)

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

// FindBindingOperator provides a mock function with given fields: context
func (_m *Loader) FindBindingOperator(context *service.ActionContext) (*unstructured.Unstructured, error) {
	ret := _m.Called(context)

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(*service.ActionContext) (*unstructured.Unstructured, error)); ok {
		return rf(context)
	}
	if rf, ok := ret.Get(0).(func(*service.ActionContext) *unstructured.Unstructured); ok {
		r0 = rf(context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(*service.ActionContext) error); ok {
		r1 = rf(context)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSecret provides a mock function with given fields: _a0, _a1
func (_m *Loader) FindSecret(_a0 *service.ActionContext, _a1 *unstructured.Unstructured) (*v1.Secret, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*service.ActionContext, *unstructured.Unstructured) (*v1.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*service.ActionContext, *unstructured.Unstructured) *v1.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*service.ActionContext, *unstructured.Unstructured) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoader interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoader creates a new instance of Loader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoader(t mockConstructorTestingTNewLoader) *Loader {
	mock := &Loader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

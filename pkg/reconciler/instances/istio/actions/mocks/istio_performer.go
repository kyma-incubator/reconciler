// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	chart "github.com/kyma-incubator/reconciler/pkg/reconciler/chart"
	actions "github.com/kyma-incubator/reconciler/pkg/reconciler/instances/istio/actions"

	kubernetes "github.com/kyma-incubator/reconciler/pkg/reconciler/kubernetes"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// IstioPerformer is an autogenerated mock type for the IstioPerformer type
type IstioPerformer struct {
	mock.Mock
}

// Install provides a mock function with given fields: kubeConfig, istioChart, istioctlVersion, logger
func (_m *IstioPerformer) Install(kubeConfig string, istioChart string, istioctlVersion string, logger *zap.SugaredLogger) error {
	ret := _m.Called(kubeConfig, istioChart, istioctlVersion, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *zap.SugaredLogger) error); ok {
		r0 = rf(kubeConfig, istioChart, istioctlVersion, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PatchMutatingWebhook provides a mock function with given fields: kubeClient, logger
func (_m *IstioPerformer) PatchMutatingWebhook(kubeClient kubernetes.Client, logger *zap.SugaredLogger) error {
	ret := _m.Called(kubeClient, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(kubernetes.Client, *zap.SugaredLogger) error); ok {
		r0 = rf(kubeClient, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetProxy provides a mock function with given fields: kubeConfig, proxyImageVersion, logger
func (_m *IstioPerformer) ResetProxy(kubeConfig string, proxyImageVersion string, logger *zap.SugaredLogger) error {
	ret := _m.Called(kubeConfig, proxyImageVersion, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *zap.SugaredLogger) error); ok {
		r0 = rf(kubeConfig, proxyImageVersion, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Uninstall provides a mock function with given fields: kubeClientSet, istioctlVersion, logger
func (_m *IstioPerformer) Uninstall(kubeClientSet kubernetes.Client, istioctlVersion string, logger *zap.SugaredLogger) error {
	ret := _m.Called(kubeClientSet, istioctlVersion, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(kubernetes.Client, string, *zap.SugaredLogger) error); ok {
		r0 = rf(kubeClientSet, istioctlVersion, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: kubeConfig, istioChart, istioctlVersion, logger
func (_m *IstioPerformer) Update(kubeConfig string, istioChart string, istioctlVersion string, logger *zap.SugaredLogger) error {
	ret := _m.Called(kubeConfig, istioChart, istioctlVersion, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *zap.SugaredLogger) error); ok {
		r0 = rf(kubeConfig, istioChart, istioctlVersion, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields: workspace, istioctlVersion, istioChart, kubeConfig, logger
func (_m *IstioPerformer) Version(workspace chart.Factory, istioctlVersion string, istioChart string, kubeConfig string, logger *zap.SugaredLogger) (actions.IstioStatus, error) {
	ret := _m.Called(workspace, istioctlVersion, istioChart, kubeConfig, logger)

	var r0 actions.IstioStatus
	if rf, ok := ret.Get(0).(func(chart.Factory, string, string, string, *zap.SugaredLogger) actions.IstioStatus); ok {
		r0 = rf(workspace, istioctlVersion, istioChart, kubeConfig, logger)
	} else {
		r0 = ret.Get(0).(actions.IstioStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chart.Factory, string, string, string, *zap.SugaredLogger) error); ok {
		r1 = rf(workspace, istioctlVersion, istioChart, kubeConfig, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

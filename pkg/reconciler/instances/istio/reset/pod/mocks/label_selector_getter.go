// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kubernetes "k8s.io/client-go/kubernetes"

	pod "github.com/kyma-incubator/reconciler/pkg/reconciler/instances/istio/reset/pod"
)

// labelSelectorGetter is an autogenerated mock type for the labelSelectorGetter type
type labelSelectorGetter struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, client, object
func (_m *labelSelectorGetter) Execute(_a0 context.Context, client kubernetes.Interface, object pod.CustomObject) (string, error) {
	ret := _m.Called(_a0, client, object)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, kubernetes.Interface, pod.CustomObject) string); ok {
		r0 = rf(_a0, client, object)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, kubernetes.Interface, pod.CustomObject) error); ok {
		r1 = rf(_a0, client, object)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewLabelSelectorGetter interface {
	mock.TestingT
	Cleanup(func())
}

// newLabelSelectorGetter creates a new instance of labelSelectorGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newLabelSelectorGetter(t mockConstructorTestingTnewLabelSelectorGetter) *labelSelectorGetter {
	mock := &labelSelectorGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

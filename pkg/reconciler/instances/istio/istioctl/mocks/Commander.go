// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	zap "go.uber.org/zap"
)

// Commander is an autogenerated mock type for the Commander type
type Commander struct {
	mock.Mock
}

// Install provides a mock function with given fields: istioOperator, kubeconfig, logger
func (_m *Commander) Install(istioOperator string, kubeconfig string, logger *zap.SugaredLogger) error {
	ret := _m.Called(istioOperator, kubeconfig, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *zap.SugaredLogger) error); ok {
		r0 = rf(istioOperator, kubeconfig, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upgrade provides a mock function with given fields: istioOperator, kubeconfig, logger
func (_m *Commander) Upgrade(istioOperator string, kubeconfig string, logger *zap.SugaredLogger) error {
	ret := _m.Called(istioOperator, kubeconfig, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *zap.SugaredLogger) error); ok {
		r0 = rf(istioOperator, kubeconfig, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields: kubeconfig, logger
func (_m *Commander) Version(kubeconfig string, logger *zap.SugaredLogger) ([]byte, error) {
	ret := _m.Called(kubeconfig, logger)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, *zap.SugaredLogger) []byte); ok {
		r0 = rf(kubeconfig, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *zap.SugaredLogger) error); ok {
		r1 = rf(kubeconfig, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

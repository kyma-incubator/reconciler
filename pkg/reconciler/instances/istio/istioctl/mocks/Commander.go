// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Commander is an autogenerated mock type for the Commander type
type Commander struct {
	mock.Mock
}

// Install provides a mock function with given fields: istioCtlPath, istioOperatorPath, kubeconfigPath
func (_m *Commander) Install(istioCtlPath string, istioOperatorPath string, kubeconfigPath string) error {
	ret := _m.Called(istioCtlPath, istioOperatorPath, kubeconfigPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(istioCtlPath, istioOperatorPath, kubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upgrade provides a mock function with given fields: istioCtlPath, istioOperatorPath, kubeconfigPath
func (_m *Commander) Upgrade(istioCtlPath string, istioOperatorPath string, kubeconfigPath string) error {
	ret := _m.Called(istioCtlPath, istioOperatorPath, kubeconfigPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(istioCtlPath, istioOperatorPath, kubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields: istioCtlPath, kubeconfigPath
func (_m *Commander) Version(istioCtlPath string, kubeconfigPath string) (string, error) {
	ret := _m.Called(istioCtlPath, kubeconfigPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(istioCtlPath, kubeconfigPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(istioCtlPath, kubeconfigPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

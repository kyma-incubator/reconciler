// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kubernetes "k8s.io/client-go/kubernetes"

	reconcilerkubernetes "github.com/kyma-incubator/reconciler/pkg/reconciler/kubernetes"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Clientset provides a mock function with given fields:
func (_m *Client) Clientset() (kubernetes.Interface, error) {
	ret := _m.Called()

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func() kubernetes.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, manifest, namespace
func (_m *Client) Delete(ctx context.Context, manifest string, namespace string) ([]*reconcilerkubernetes.Resource, error) {
	ret := _m.Called(ctx, manifest, namespace)

	var r0 []*reconcilerkubernetes.Resource
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*reconcilerkubernetes.Resource); ok {
		r0 = rf(ctx, manifest, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*reconcilerkubernetes.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, manifest, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deploy provides a mock function with given fields: ctx, manifest, namespace, interceptors
func (_m *Client) Deploy(ctx context.Context, manifest string, namespace string, interceptors ...reconcilerkubernetes.ResourceInterceptor) ([]*reconcilerkubernetes.Resource, error) {
	_va := make([]interface{}, len(interceptors))
	for _i := range interceptors {
		_va[_i] = interceptors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, manifest, namespace)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*reconcilerkubernetes.Resource
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...reconcilerkubernetes.ResourceInterceptor) []*reconcilerkubernetes.Resource); ok {
		r0 = rf(ctx, manifest, namespace, interceptors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*reconcilerkubernetes.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...reconcilerkubernetes.ResourceInterceptor) error); ok {
		r1 = rf(ctx, manifest, namespace, interceptors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubeconfig provides a mock function with given fields:
func (_m *Client) Kubeconfig() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

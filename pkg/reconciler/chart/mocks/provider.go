// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	chart "github.com/kyma-incubator/reconciler/pkg/reconciler/chart"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// Configuration provides a mock function with given fields: component
func (_m *Provider) Configuration(component *chart.Component) (map[string]interface{}, error) {
	ret := _m.Called(component)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*chart.Component) (map[string]interface{}, error)); ok {
		return rf(component)
	}
	if rf, ok := ret.Get(0).(func(*chart.Component) map[string]interface{}); ok {
		r0 = rf(component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*chart.Component) error); ok {
		r1 = rf(component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderCRD provides a mock function with given fields: version
func (_m *Provider) RenderCRD(version string) ([]*chart.Manifest, error) {
	ret := _m.Called(version)

	var r0 []*chart.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*chart.Manifest, error)); ok {
		return rf(version)
	}
	if rf, ok := ret.Get(0).(func(string) []*chart.Manifest); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chart.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderCRDFiltered provides a mock function with given fields: version, exclude
func (_m *Provider) RenderCRDFiltered(version string, exclude []string) ([]*chart.Manifest, error) {
	ret := _m.Called(version, exclude)

	var r0 []*chart.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]*chart.Manifest, error)); ok {
		return rf(version, exclude)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []*chart.Manifest); ok {
		r0 = rf(version, exclude)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chart.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(version, exclude)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderManifest provides a mock function with given fields: component
func (_m *Provider) RenderManifest(component *chart.Component) (*chart.Manifest, error) {
	ret := _m.Called(component)

	var r0 *chart.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(*chart.Component) (*chart.Manifest, error)); ok {
		return rf(component)
	}
	if rf, ok := ret.Get(0).(func(*chart.Component) *chart.Manifest); ok {
		r0 = rf(component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chart.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(*chart.Component) error); ok {
		r1 = rf(component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithFilter provides a mock function with given fields: filter
func (_m *Provider) WithFilter(filter chart.Filter) chart.Provider {
	ret := _m.Called(filter)

	var r0 chart.Provider
	if rf, ok := ret.Get(0).(func(chart.Filter) chart.Provider); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chart.Provider)
		}
	}

	return r0
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

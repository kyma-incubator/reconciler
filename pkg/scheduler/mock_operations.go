// Code generated by mockery 2.7.4. DO NOT EDIT.

package scheduler

import mock "github.com/stretchr/testify/mock"

// MockOperationsRegistry is an autogenerated mock type for the OperationsRegistry type
type MockOperationsRegistry struct {
	mock.Mock
}

// GetDoneOperations provides a mock function with given fields: schedulingID
func (_m *MockOperationsRegistry) GetDoneOperations(schedulingID string) ([]*OperationState, error) {
	ret := _m.Called(schedulingID)

	var r0 []*OperationState
	if rf, ok := ret.Get(0).(func(string) []*OperationState); ok {
		r0 = rf(schedulingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*OperationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schedulingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: correlationID, schedulingID
func (_m *MockOperationsRegistry) GetOperation(correlationID string, schedulingID string) *OperationState {
	ret := _m.Called(correlationID, schedulingID)

	var r0 *OperationState
	if rf, ok := ret.Get(0).(func(string, string) *OperationState); ok {
		r0 = rf(correlationID, schedulingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OperationState)
		}
	}

	return r0
}

// RegisterOperation provides a mock function with given fields: correlationID, schedulingID, component
func (_m *MockOperationsRegistry) RegisterOperation(correlationID string, schedulingID string, component string) (*OperationState, error) {
	ret := _m.Called(correlationID, schedulingID, component)

	var r0 *OperationState
	if rf, ok := ret.Get(0).(func(string, string, string) *OperationState); ok {
		r0 = rf(correlationID, schedulingID, component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OperationState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(correlationID, schedulingID, component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveOperation provides a mock function with given fields: correlationID, schedulingID
func (_m *MockOperationsRegistry) RemoveOperation(correlationID string, schedulingID string) error {
	ret := _m.Called(correlationID, schedulingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(correlationID, schedulingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetClientError provides a mock function with given fields: correlationID, schedulingID, reason
func (_m *MockOperationsRegistry) SetClientError(correlationID string, schedulingID string, reason string) error {
	ret := _m.Called(correlationID, schedulingID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(correlationID, schedulingID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDone provides a mock function with given fields: correlationID, schedulingID
func (_m *MockOperationsRegistry) SetDone(correlationID string, schedulingID string) error {
	ret := _m.Called(correlationID, schedulingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(correlationID, schedulingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetError provides a mock function with given fields: correlationID, schedulingID, reason
func (_m *MockOperationsRegistry) SetError(correlationID string, schedulingID string, reason string) error {
	ret := _m.Called(correlationID, schedulingID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(correlationID, schedulingID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFailed provides a mock function with given fields: correlationID, schedulingID, reason
func (_m *MockOperationsRegistry) SetFailed(correlationID string, schedulingID string, reason string) error {
	ret := _m.Called(correlationID, schedulingID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(correlationID, schedulingID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetInProgress provides a mock function with given fields: correlationID, schedulingID
func (_m *MockOperationsRegistry) SetInProgress(correlationID string, schedulingID string) error {
	ret := _m.Called(correlationID, schedulingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(correlationID, schedulingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
